-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/minimalIpCore/minimal_ip_src_minimal_IP.vhd
-- Created: 2024-08-25 17:47:58
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- a_times_b                     ce_out        1e-08
-- a_plus_b                      ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: minimal_ip_src_minimal_IP
-- Source Path: minimalIpCore/minimal_IP
-- Hierarchy Level: 0
-- Model version: 1.8
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY minimal_ip_src_minimal_IP IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        in_a                              :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        in_b                              :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        a_times_b                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        a_plus_b                          :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
        );
END minimal_ip_src_minimal_IP;


ARCHITECTURE rtl OF minimal_ip_src_minimal_IP IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL in_a_unsigned                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL in_b_unsigned                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Product_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay2_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Add_out1                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Delay3_out1                      : unsigned(8 DOWNTO 0);  -- ufix9

BEGIN
  in_a_unsigned <= unsigned(in_a);

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay_out1 <= in_a_unsigned;
      END IF;
    END IF;
  END PROCESS Delay_process;


  in_b_unsigned <= unsigned(in_b);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay1_out1 <= in_b_unsigned;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Product_out1 <= Delay_out1 * Delay1_out1;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  a_times_b <= std_logic_vector(Delay2_out1);

  Add_out1 <= resize(Delay_out1, 9) + resize(Delay1_out1, 9);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_unsigned(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  a_plus_b <= std_logic_vector(Delay3_out1);

  ce_out <= clk_enable;

END rtl;

