-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/hdlcoder_multi_cycle_path_constraints/example_b_ip.vhd
-- Created: 2024-09-14 14:13:02
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: example_b_ip
-- Source Path: example_b_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY example_b_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        In2                               :   IN    std_logic_vector(287 DOWNTO 0);  -- ufix288
        Out1                              :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
        );
END example_b_ip;


ARCHITECTURE rtl OF example_b_ip IS

  -- Component Declarations
  COMPONENT example_b_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT example_b_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          In2_0                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          In2_1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          In2_2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          In2_3                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          In2_4                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          In2_5                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          In2_6                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          In2_7                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          In2_8                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
          ce_out                          :   OUT   std_logic;  -- ufix1
          Out1                            :   OUT   std_logic_vector(63 DOWNTO 0)  -- sfix64
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : example_b_ip_reset_sync
    USE ENTITY work.example_b_ip_reset_sync(rtl);

  FOR ALL : example_b_ip_dut
    USE ENTITY work.example_b_ip_dut(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL In1_unsigned                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In1_sig                          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL In2_unsigned                     : unsigned(287 DOWNTO 0);  -- ufix288
  SIGNAL In2_slice                        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_0_sig                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL In2_unsigned_1                   : unsigned(287 DOWNTO 0);  -- ufix288
  SIGNAL In2_slice_1                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_1_sig                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL In2_unsigned_2                   : unsigned(287 DOWNTO 0);  -- ufix288
  SIGNAL In2_slice_2                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_2_sig                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL In2_unsigned_3                   : unsigned(287 DOWNTO 0);  -- ufix288
  SIGNAL In2_slice_3                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_3_sig                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL In2_unsigned_4                   : unsigned(287 DOWNTO 0);  -- ufix288
  SIGNAL In2_slice_4                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_4_sig                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL In2_unsigned_5                   : unsigned(287 DOWNTO 0);  -- ufix288
  SIGNAL In2_slice_5                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_5_sig                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL In2_unsigned_6                   : unsigned(287 DOWNTO 0);  -- ufix288
  SIGNAL In2_slice_6                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_6_sig                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL In2_unsigned_7                   : unsigned(287 DOWNTO 0);  -- ufix288
  SIGNAL In2_slice_7                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_7_sig                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL In2_unsigned_8                   : unsigned(287 DOWNTO 0);  -- ufix288
  SIGNAL In2_slice_8                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In2_8_sig                        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL Out1_sig                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Out1_sig_signed                  : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Out1_tmp                         : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  u_example_b_ip_reset_sync_inst : example_b_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset_x
              );

  u_example_b_ip_dut_inst : example_b_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => dut_enable,  -- ufix1
              In1 => std_logic_vector(In1_sig),  -- sfix32
              In2_0 => std_logic_vector(In2_0_sig),  -- sfix32
              In2_1 => std_logic_vector(In2_1_sig),  -- sfix32
              In2_2 => std_logic_vector(In2_2_sig),  -- sfix32
              In2_3 => std_logic_vector(In2_3_sig),  -- sfix32
              In2_4 => std_logic_vector(In2_4_sig),  -- sfix32
              In2_5 => std_logic_vector(In2_5_sig),  -- sfix32
              In2_6 => std_logic_vector(In2_6_sig),  -- sfix32
              In2_7 => std_logic_vector(In2_7_sig),  -- sfix32
              In2_8 => std_logic_vector(In2_8_sig),  -- sfix32
              ce_out => ce_out_sig,  -- ufix1
              Out1 => Out1_sig  -- sfix64
              );

  dut_enable <= '1';

  In1_unsigned <= unsigned(In1);

  In1_sig <= signed(In1_unsigned);

  In2_unsigned <= unsigned(In2);

  In2_slice <= In2_unsigned(31 DOWNTO 0);

  In2_0_sig <= signed(In2_slice);

  In2_unsigned_1 <= unsigned(In2);

  In2_slice_1 <= In2_unsigned_1(63 DOWNTO 32);

  In2_1_sig <= signed(In2_slice_1);

  In2_unsigned_2 <= unsigned(In2);

  In2_slice_2 <= In2_unsigned_2(95 DOWNTO 64);

  In2_2_sig <= signed(In2_slice_2);

  In2_unsigned_3 <= unsigned(In2);

  In2_slice_3 <= In2_unsigned_3(127 DOWNTO 96);

  In2_3_sig <= signed(In2_slice_3);

  In2_unsigned_4 <= unsigned(In2);

  In2_slice_4 <= In2_unsigned_4(159 DOWNTO 128);

  In2_4_sig <= signed(In2_slice_4);

  In2_unsigned_5 <= unsigned(In2);

  In2_slice_5 <= In2_unsigned_5(191 DOWNTO 160);

  In2_5_sig <= signed(In2_slice_5);

  In2_unsigned_6 <= unsigned(In2);

  In2_slice_6 <= In2_unsigned_6(223 DOWNTO 192);

  In2_6_sig <= signed(In2_slice_6);

  In2_unsigned_7 <= unsigned(In2);

  In2_slice_7 <= In2_unsigned_7(255 DOWNTO 224);

  In2_7_sig <= signed(In2_slice_7);

  In2_unsigned_8 <= unsigned(In2);

  In2_slice_8 <= In2_unsigned_8(287 DOWNTO 256);

  In2_8_sig <= signed(In2_slice_8);

  reset_cm <=  NOT IPCORE_RESETN;

  Out1_sig_signed <= signed(Out1_sig);

  Out1_tmp <= unsigned(Out1_sig_signed);

  Out1 <= std_logic_vector(Out1_tmp);

END rtl;

