-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/hdlcoder_multi_cycle_path_constraints/example_b_ip_src_Subsystem.vhd
-- Created: 2024-09-14 14:12:57
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.33333e-09
-- Target subsystem base rate: 3.33333e-09
-- Explicit user oversample request: 150x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1                          ce_out        5e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: example_b_ip_src_Subsystem
-- Source Path: hdlcoder_multi_cycle_path_constraints/Subsystem
-- Hierarchy Level: 0
-- Model version: 14.0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.example_b_ip_src_Subsystem_pac.ALL;

ENTITY example_b_ip_src_Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        In2_0                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        In2_1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        In2_2                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        In2_3                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        In2_4                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        In2_5                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        In2_6                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        In2_7                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        In2_8                             :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        ce_out                            :   OUT   std_logic;
        Out1                              :   OUT   std_logic_vector(63 DOWNTO 0)  -- sfix64
        );
END example_b_ip_src_Subsystem;


ARCHITECTURE rtl OF example_b_ip_src_Subsystem IS

  -- Component Declarations
  COMPONENT example_b_ip_src_Subsystem_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb_150_1_0                     :   OUT   std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT example_b_ip_src_Dot_Product
    PORT( In1                             :   IN    vector_of_std_logic_vector32(0 TO 8);  -- int32 [9]
          In2                             :   IN    vector_of_std_logic_vector32(0 TO 8);  -- int32 [9]
          Out1                            :   OUT   std_logic_vector(63 DOWNTO 0)  -- sfix64
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : example_b_ip_src_Subsystem_tc
    USE ENTITY work.example_b_ip_src_Subsystem_tc(rtl);

  FOR ALL : example_b_ip_src_Dot_Product
    USE ENTITY work.example_b_ip_src_Dot_Product(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb_150_1_0                      : std_logic;
  SIGNAL In1_signed                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay10_out1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay9_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay8_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay7_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay3_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay4_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay5_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay6_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2                              : vector_of_signed32(0 TO 8);  -- int32 [9]
  SIGNAL Mux_out1                         : vector_of_signed32(0 TO 8);  -- int32 [9]
  SIGNAL Mux_out1_1                       : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Delay2_out1                      : vector_of_signed32(0 TO 8);  -- int32 [9]
  SIGNAL Delay2_out1_1                    : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL Dot_Product_out1                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Dot_Product_out1_signed          : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Delay1_out1                      : signed(63 DOWNTO 0);  -- sfix64

BEGIN
  u_Subsystem_tc : example_b_ip_src_Subsystem_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb_150_1_0 => enb_150_1_0,
              enb => enb,
              enb_1_1_1 => enb_1_1_1
              );

  u_Dot_Product : example_b_ip_src_Dot_Product
    PORT MAP( In1 => Mux_out1_1,  -- int32 [9]
              In2 => Delay2_out1_1,  -- int32 [9]
              Out1 => Dot_Product_out1  -- sfix64
              );

  In1_signed <= signed(In1);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay_out1 <= In1_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay10_out1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay9_out1 <= Delay10_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Delay9_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Delay3_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  In2(0) <= signed(In2_0);
  In2(1) <= signed(In2_1);
  In2(2) <= signed(In2_2);
  In2(3) <= signed(In2_3);
  In2(4) <= signed(In2_4);
  In2(5) <= signed(In2_5);
  In2(6) <= signed(In2_6);
  In2(7) <= signed(In2_7);
  In2(8) <= signed(In2_8);

  Mux_out1(0) <= Delay6_out1;
  Mux_out1(1) <= Delay5_out1;
  Mux_out1(2) <= Delay4_out1;
  Mux_out1(3) <= Delay3_out1;
  Mux_out1(4) <= Delay7_out1;
  Mux_out1(5) <= Delay8_out1;
  Mux_out1(6) <= Delay9_out1;
  Mux_out1(7) <= Delay10_out1;
  Mux_out1(8) <= Delay_out1;

  outputgen1: FOR k IN 0 TO 8 GENERATE
    Mux_out1_1(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        Delay2_out1 <= In2;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  outputgen: FOR k IN 0 TO 8 GENERATE
    Delay2_out1_1(k) <= std_logic_vector(Delay2_out1(k));
  END GENERATE;

  Dot_Product_out1_signed <= signed(Dot_Product_out1);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Dot_Product_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Out1 <= std_logic_vector(Delay1_out1);

  ce_out <= enb_1_1_1;

END rtl;

