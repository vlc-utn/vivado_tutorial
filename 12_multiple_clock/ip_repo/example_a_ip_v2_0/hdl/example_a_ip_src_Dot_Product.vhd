-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/hdlcoder_multi_cycle_path_constraints/example_a_ip_src_Dot_Product.vhd
-- Created: 2024-09-14 13:54:12
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: example_a_ip_src_Dot_Product
-- Source Path: hdlcoder_multi_cycle_path_constraints/Subsystem/Dot Product
-- Hierarchy Level: 1
-- Model version: 14.0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.example_a_ip_src_Subsystem_pac.ALL;

ENTITY example_a_ip_src_Dot_Product IS
  PORT( In1                               :   IN    vector_of_std_logic_vector32(0 TO 8);  -- int32 [9]
        In2                               :   IN    vector_of_std_logic_vector32(0 TO 8);  -- int32 [9]
        Out1                              :   OUT   std_logic_vector(63 DOWNTO 0)  -- sfix64
        );
END example_a_ip_src_Dot_Product;


ARCHITECTURE rtl OF example_a_ip_src_Dot_Product IS

  -- Signals
  SIGNAL In1_8                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2_8                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product8_out1                    : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL In1_7                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2_7                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product7_out1                    : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL In1_6                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2_6                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product6_out1                    : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL In1_5                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2_5                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product5_out1                    : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL In1_4                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2_4                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product4_out1                    : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL In1_3                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2_3                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product3_out1                    : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL In1_2                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2_2                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product2_out1                    : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL In1_1                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2_1                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product1_out1                    : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL In1_0                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL In2_0                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL Product_out1                     : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Add_out1                         : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Add1_out1                        : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Add2_out1                        : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Add3_out1                        : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Add4_out1                        : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Add5_out1                        : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Add6_out1                        : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL Add7_out1                        : signed(63 DOWNTO 0);  -- sfix64

BEGIN
  In1_8 <= signed(In1(8));

  In2_8 <= signed(In2(8));

  Product8_out1 <= In1_8 * In2_8;

  In1_7 <= signed(In1(7));

  In2_7 <= signed(In2(7));

  Product7_out1 <= In1_7 * In2_7;

  In1_6 <= signed(In1(6));

  In2_6 <= signed(In2(6));

  Product6_out1 <= In1_6 * In2_6;

  In1_5 <= signed(In1(5));

  In2_5 <= signed(In2(5));

  Product5_out1 <= In1_5 * In2_5;

  In1_4 <= signed(In1(4));

  In2_4 <= signed(In2(4));

  Product4_out1 <= In1_4 * In2_4;

  In1_3 <= signed(In1(3));

  In2_3 <= signed(In2(3));

  Product3_out1 <= In1_3 * In2_3;

  In1_2 <= signed(In1(2));

  In2_2 <= signed(In2(2));

  Product2_out1 <= In1_2 * In2_2;

  In1_1 <= signed(In1(1));

  In2_1 <= signed(In2(1));

  Product1_out1 <= In1_1 * In2_1;

  In1_0 <= signed(In1(0));

  In2_0 <= signed(In2(0));

  Product_out1 <= In1_0 * In2_0;

  Add_out1 <= Product1_out1 + Product_out1;

  Add1_out1 <= Product2_out1 + Add_out1;

  Add2_out1 <= Product3_out1 + Add1_out1;

  Add3_out1 <= Product4_out1 + Add2_out1;

  Add4_out1 <= Product5_out1 + Add3_out1;

  Add5_out1 <= Product6_out1 + Add4_out1;

  Add6_out1 <= Product7_out1 + Add5_out1;

  Add7_out1 <= Product8_out1 + Add6_out1;

  Out1 <= std_logic_vector(Add7_out1);

END rtl;

