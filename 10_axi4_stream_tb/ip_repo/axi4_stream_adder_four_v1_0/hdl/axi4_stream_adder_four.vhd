-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLAXI4Stream/axi4_stream_adder_four.vhd
-- Created: 2024-08-31 10:23:40
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi4_stream_adder_four
-- Source Path: axi4_stream_adder_four
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY axi4_stream_adder_four IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Slave_TDATA           :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_Stream_Slave_TVALID          :   IN    std_logic;  -- ufix1
        AXI4_Stream_Slave_TLAST           :   IN    std_logic;  -- ufix1
        first_in                          :   IN    std_logic;  -- ufix1
        AXI4_Stream_Slave_TREADY          :   OUT   std_logic;  -- ufix1
        data_out                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        valid_out                         :   OUT   std_logic  -- ufix1
        );
END axi4_stream_adder_four;


ARCHITECTURE rtl OF axi4_stream_adder_four IS

  -- Component Declarations
  COMPONENT axi4_stream_adder_four_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT axi4_stream_adder_four_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          data_in                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          valid_in                        :   IN    std_logic;  -- ufix1
          last_in                         :   IN    std_logic;  -- ufix1
          first_in                        :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          data_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          valid_out                       :   OUT   std_logic;  -- ufix1
          ready                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT axi4_stream_adder_four_axi4_stream_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Slave_TDATA         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_Stream_Slave_TVALID        :   IN    std_logic;  -- ufix1
          AXI4_Stream_Slave_TLAST         :   IN    std_logic;  -- ufix1
          user_ready                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_Slave_TREADY        :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          user_valid                      :   OUT   std_logic;  -- ufix1
          user_TLAST                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi4_stream_adder_four_reset_sync
    USE ENTITY work.axi4_stream_adder_four_reset_sync(rtl);

  FOR ALL : axi4_stream_adder_four_dut
    USE ENTITY work.axi4_stream_adder_four_dut(rtl);

  FOR ALL : axi4_stream_adder_four_axi4_stream_slave
    USE ENTITY work.axi4_stream_adder_four_axi4_stream_slave(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL top_user_data                    : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL top_user_TLAST                   : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL data_out_sig                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL valid_out_sig                    : std_logic;  -- ufix1
  SIGNAL ready_sig                        : std_logic;  -- ufix1

BEGIN
  u_axi4_stream_adder_four_reset_sync_inst : axi4_stream_adder_four_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset_x
              );

  u_axi4_stream_adder_four_dut_inst : axi4_stream_adder_four_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => dut_enable,  -- ufix1
              data_in => top_user_data,  -- ufix8
              valid_in => top_user_valid,  -- ufix1
              last_in => top_user_TLAST,  -- ufix1
              first_in => first_in,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              data_out => data_out_sig,  -- ufix8
              valid_out => valid_out_sig,  -- ufix1
              ready => ready_sig  -- ufix1
              );

  u_axi4_stream_adder_four_axi4_stream_slave_inst : axi4_stream_adder_four_axi4_stream_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              enb => const_1_1,
              AXI4_Stream_Slave_TDATA => AXI4_Stream_Slave_TDATA,  -- ufix8
              AXI4_Stream_Slave_TVALID => AXI4_Stream_Slave_TVALID,  -- ufix1
              AXI4_Stream_Slave_TLAST => AXI4_Stream_Slave_TLAST,  -- ufix1
              user_ready => ready_sig,  -- ufix1
              AXI4_Stream_Slave_TREADY => AXI4_Stream_Slave_TREADY,  -- ufix1
              user_data => top_user_data,  -- ufix8
              user_valid => top_user_valid,  -- ufix1
              user_TLAST => top_user_TLAST  -- ufix1
              );

  dut_enable <= '1';

  reset_cm <=  NOT IPCORE_RESETN;

  const_1_1 <= '1';

  data_out <= data_out_sig;

  valid_out <= valid_out_sig;

END rtl;

