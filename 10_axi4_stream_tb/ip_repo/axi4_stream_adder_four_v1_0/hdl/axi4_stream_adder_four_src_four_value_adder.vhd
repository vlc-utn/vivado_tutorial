-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLAXI4Stream/axi4_stream_adder_four_src_four_value_adder.vhd
-- Created: 2024-08-31 10:23:31
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- data_out                      ce_out        1e-08
-- valid_out                     ce_out        1e-08
-- ready                         ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: axi4_stream_adder_four_src_four_value_adder
-- Source Path: HDLAXI4Stream/four_value_adder
-- Hierarchy Level: 0
-- Model version: 1.52
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.axi4_stream_adder_four_src_four_value_adder_pac.ALL;

ENTITY axi4_stream_adder_four_src_four_value_adder IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_in                          :   IN    std_logic;
        last_in                           :   IN    std_logic;
        first_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        data_out                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_out                         :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END axi4_stream_adder_four_src_four_value_adder;


ARCHITECTURE rtl OF axi4_stream_adder_four_src_four_value_adder IS

  -- Component Declarations
  COMPONENT axi4_stream_adder_four_src_rising_edge
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rising                       :   IN    std_logic;
          out_rising                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : axi4_stream_adder_four_src_rising_edge
    USE ENTITY work.axi4_stream_adder_four_src_rising_edge(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL data_in_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch1_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Unit_Delay_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tapped_Delay_out1                : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Tapped_Delay_out1_0              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Tapped_Delay_out1_1              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_op_stage1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Tapped_Delay_out1_2              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_op_stage2                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Tapped_Delay_out1_3              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Tapped_Delay1_out1               : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL Tapped_Delay1_out1_0             : std_logic;
  SIGNAL Tapped_Delay1_out1_1             : std_logic;
  SIGNAL Tapped_Delay1_out1_2             : std_logic;
  SIGNAL Tapped_Delay1_out1_3             : std_logic;
  SIGNAL Bitwise_OR_out1                  : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Tapped_Delay2_out1               : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL Tapped_Delay2_out1_3             : std_logic;
  SIGNAL Tapped_Delay2_out1_2             : std_logic;
  SIGNAL Tapped_Delay2_out1_1             : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL rising_edge_out1                 : std_logic;
  SIGNAL Tapped_Delay2_out1_0             : std_logic;
  SIGNAL Bitwise_OR1_out1                 : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  u_rising_edge : axi4_stream_adder_four_src_rising_edge
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              in_rising => AND_out1,
              out_rising => rising_edge_out1
              );

  enb <= clk_enable;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= last_in;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_out1 <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= Delay11_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  data_in_unsigned <= unsigned(data_in);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1 <= data_in_unsigned;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Unit_Delay_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  
  Switch1_out1 <= Unit_Delay_out1 WHEN Delay7_out1 = '0' ELSE
      Delay6_out1;

  Tapped_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Tapped_Delay_out1 <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        Tapped_Delay_out1(3) <= Switch1_out1;
        Tapped_Delay_out1(0 TO 2) <= Tapped_Delay_out1(1 TO 3);
      END IF;
    END IF;
  END PROCESS Tapped_Delay_process;


  Tapped_Delay_out1_0 <= Tapped_Delay_out1(0);

  Tapped_Delay_out1_1 <= Tapped_Delay_out1(1);

  Add_op_stage1 <= resize(Tapped_Delay_out1_0 + Tapped_Delay_out1_1, 9);

  Tapped_Delay_out1_2 <= Tapped_Delay_out1(2);

  Add_op_stage2 <= resize(resize(Add_op_stage1, 8) + Tapped_Delay_out1_2, 10);

  Tapped_Delay_out1_3 <= Tapped_Delay_out1(3);

  Add_out1 <= resize(Add_op_stage2, 8) + Tapped_Delay_out1_3;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Constant_out1 <= to_unsigned(16#FF#, 8);

  
  Switch_out1 <= Delay_out1 WHEN Delay3_out1 = '0' ELSE
      Constant_out1;

  data_out <= std_logic_vector(Switch_out1);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_out1 <= first_in;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Tapped_Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Tapped_Delay1_out1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Tapped_Delay1_out1(3) <= Delay8_out1;
        Tapped_Delay1_out1(2 DOWNTO 0) <= Tapped_Delay1_out1(3 DOWNTO 1);
      END IF;
    END IF;
  END PROCESS Tapped_Delay1_process;


  Tapped_Delay1_out1_0 <= Tapped_Delay1_out1(0);

  Tapped_Delay1_out1_1 <= Tapped_Delay1_out1(1);

  Tapped_Delay1_out1_2 <= Tapped_Delay1_out1(2);

  Tapped_Delay1_out1_3 <= Tapped_Delay1_out1(3);

  Bitwise_OR_out1 <= Tapped_Delay1_out1_3 OR (Tapped_Delay1_out1_2 OR (Tapped_Delay1_out1_0 OR Tapped_Delay1_out1_1));

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= Bitwise_OR_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Tapped_Delay2_out1_3 <= Tapped_Delay2_out1(3);

  Tapped_Delay2_out1_2 <= Tapped_Delay2_out1(2);

  Tapped_Delay2_out1_1 <= Tapped_Delay2_out1(1);

  Tapped_Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Tapped_Delay2_out1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Tapped_Delay2_out1(3) <= rising_edge_out1;
        Tapped_Delay2_out1(2 DOWNTO 0) <= Tapped_Delay2_out1(3 DOWNTO 1);
      END IF;
    END IF;
  END PROCESS Tapped_Delay2_process;


  Tapped_Delay2_out1_0 <= Tapped_Delay2_out1(0);

  Bitwise_OR1_out1 <= Tapped_Delay2_out1_3 OR (Tapped_Delay2_out1_2 OR (Tapped_Delay2_out1_0 OR Tapped_Delay2_out1_1));

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay1_reg(0) <= Bitwise_OR1_out1;
        Delay1_reg(4 DOWNTO 1) <= Delay1_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(4);

  OR_out1 <= Delay1_out1 OR Delay4_out1;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1 <= OR_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  AND_out1 <= Delay7_out1 AND Delay9_out1;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_out1 <= AND_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= Delay10_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  ce_out <= clk_enable;

  valid_out <= Delay2_out1;

  ready <= OR_out1;

END rtl;

